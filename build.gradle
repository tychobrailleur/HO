import java.text.SimpleDateFormat

// region ============ plugins and external jar dependencies ===================================================================
plugins {
    id 'java'
    id 'application'
    id 'de.jansauer.poeditor' version '1.0.0'
    id 'org.kordamp.gradle.markdown' version '2.2.0'
    id "com.github.breadmoirai.github-release" version "2.2.10"
    id 'com.install4j.gradle' version '8.0.7'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
    id 'org.beryx.jlink' version '2.19.0'
}

repositories {
    jcenter()
}

//============  external jar dependencies ==========
dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.toedter:jcalendar:1.4'
    implementation 'org.scribe:scribe:1.3.0'
    implementation 'org.hsqldb:hsqldb:2.4.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'com.github.weisj:darklaf-core:[2.1.0,)'
    implementation 'com.github.weisj:darklaf-theme:[2.1.0,)'
    implementation 'com.formdev:svgSalamander:1.1.2.1'
    testImplementation 'junit:junit:4.12'
}

// endregion

//  Version ============================================================
// Major.minor.Development_stage.Build
// Development_stage (DEV:0  BETA:1  STABLE:2)

def major = '4'
def minor = '0'
def development_stage = '0'
def releaseArtefacts = false

// region configuration ==============================================================================================
println "Configuration start"

ext {
    nsis_exe_path = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
    nsis_confPath = "${projectDir}\\buildResources\\Win\\nsis"
    nsis_scriptName = "${nsis_confPath}\\makeWinInstaller.nsi"
    target_dir = "${buildDir}/artefacts"
    osx_app_dir_sourcedir = "${projectDir}/buildResources/Mac"
    python_script = "${projectDir}\\buildResources\\Generic\\generate_hash.py"
}

// Define build number =================
def versionPropsFile = file('version.properties')
Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))
def buildNumber = (versionProps['buildNumber'] as Integer) + 1
buildNumber =  buildNumber.toString()
versionProps['buildNumber'] = buildNumber
versionProps.store(versionPropsFile.newWriter(), null)

project.version = major + '.' + minor + '.' + development_stage + '.' + buildNumber
def moduleVersion = project.version

println "Project:  $project.name $project.version ....................."

//  configure application plugin --------------------------------
application {
    mainClassName = 'core.HOLauncher'
}

//  configure java plugin --------------------------------
java {
    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
    modularity.inferModulePath.set(true)
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
    // Cf. https://youtrack.jetbrains.com/issue/IDEA-197469
    // at compile time, put resources in same directories as classes
    main.output.resourcesDir = main.java.outputDir
}

// at run time, make Gradle use the module path
run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', "$moduleName/$mainClassName"
        ]
        classpath = files()
    }
}

//  configure markdownToHtml --------------------------------
markdownToHtml {
    markdownToHtml.tables = true  // Configuration
}

// Configure poeditor plugin ================================

poeditor {
    apiKey = POEDITOR_APIKEY
    projectId = '206221'

    trans type:'properties', lang: 'bg', file: 'src\\main\\resources\\sprache\\Bulgarian.properties'
    trans type:'properties', lang: 'ca', file: 'src\\main\\resources\\sprache\\Catalan.properties'
    trans type:'properties', lang: 'hr', file: 'src\\main\\resources\\sprache\\Hrvatski(Croatian).properties'
    trans type:'properties', lang: 'cs', file: 'src\\main\\resources\\sprache\\Czech.properties'
    trans type:'properties', lang: 'da', file: 'src\\main\\resources\\sprache\\Danish.properties'
    trans type:'properties', lang: 'nl', file: 'src\\main\\resources\\sprache\\Nederlands.properties'
    trans type:'properties', lang: 'fi', file: 'src\\main\\resources\\sprache\\Finnish.properties'
    trans type:'properties', lang: 'fr', file: 'src\\main\\resources\\sprache\\French.properties'
    trans type:'properties', lang: 'de', file: 'src\\main\\resources\\sprache\\Deutsch.properties'
    trans type:'properties', lang: 'el', file: 'src\\main\\resources\\sprache\\Greeklish.properties'
    trans type:'properties', lang: 'he', file: 'src\\main\\resources\\sprache\\Hebrew.properties' //Hebrew
    trans type:'properties', lang: 'hu', file: 'src\\main\\resources\\sprache\\Magyar.properties'  //Hungarian
    trans type:'properties', lang: 'it', file: 'src\\main\\resources\\sprache\\Italiano.properties'
    trans type:'properties', lang: 'ko', file: 'src\\main\\resources\\sprache\\Hangul(Korean).properties'
    trans type:'properties', lang: 'lv', file: 'src\\main\\resources\\sprache\\Latvija.properties' //Lettonie
    trans type:'properties', lang: 'lt', file: 'src\\main\\resources\\sprache\\Lithuanian.properties'
    trans type:'properties', lang: 'fa', file: 'src\\main\\resources\\sprache\\Persian.properties'
    trans type:'properties', lang: 'pl', file: 'src\\main\\resources\\sprache\\Polish.properties'
    trans type:'properties', lang: 'pt', file: 'src\\main\\resources\\sprache\\Portugues.properties'
    trans type:'properties', lang: 'pt-br', file: 'src\\main\\resources\\sprache\\PortuguesBrasil.properties'
    trans type:'properties', lang: 'ro', file: 'src\\main\\resources\\sprache\\Romanian.properties'
    trans type:'properties', lang: 'ru', file: 'src\\main\\resources\\sprache\\Russian.properties'
    trans type:'properties', lang: 'sr-cyrl', file: 'src\\main\\resources\\sprache\\Serbian(Cyrillic).properties'
    trans type:'properties', lang: 'sk', file: 'src\\main\\resources\\sprache\\Slovak.properties' //Slovak
    trans type:'properties', lang: 'es', file: 'src\\main\\resources\\sprache\\Spanish.properties'
    trans type:'properties', lang: 'sv', file: 'src\\main\\resources\\sprache\\Svenska.properties' //Swedish
    trans type:'properties', lang: 'tr', file: 'src\\main\\resources\\sprache\\Turkish.properties'
}


// Configure jar task ================================
jar {
    archiveFileName = "HO.jar"
    manifest {
        attributes 'Manifest-Version': 1.0, 'Implementation-Title': 'HO', 'Implementation-Version': project.version,
                   'Main-Class': 'core.HOLauncher',
                    "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
    }

    exclude "/*.jar", "/*.ico", "/*.png", "/*.md", "/*.html"

}

// Configure distribution task =======================
distributions {
    main {
        baseName = 'XXX'
    }
}

// Configure jlink task =======================
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    mergedModule {
        requires 'java.desktop'
        requires 'java.sql'
    }
    launcher {
        name = 'HO'
        jvmArgs = ['-Dapple.laf.useScreenMenuBar=true', '-Dapple.awt.showGrowBox=true']
    }
    jpackage {
        imageOptions = [
                '--icon', "${projectDir}/buildResources/Mac/HO.icns",
                '--resource-dir', "${projectDir}/buildResources/Mac"
        ]
    }
}

// configure install4j

if (!hasProperty('install4jHomeDir')) {
    File propertiesFile = file("${System.getProperty('user.home')}/.gradle/gradle.properties")
    throw new RuntimeException("Specify install4jHomeDir in $propertiesFile")
}

install4j {
    installDir = file(install4jHomeDir)
    disableSigning = true
}


// endregion ======================================================================================================================


// region my tasks ================================================================================================

task media(type: com.install4j.gradle.Install4jTask) {
    dependsOn 'CreateDistribution'
    projectFile = 'D:/Perso/Code/HO/HO.install4j'

    buildIds = [60, 62, 63, 64, 172]

    variables = [HO_version: project.version]
}

task preparingBuild(dependsOn: clean) {
    group 'sub tasks'
    if (releaseArtefacts) {
        doLast {
            //     Deleting build project     ---------------------------------------------------------------------
            println("Deleting build and execution files ....")
            project.delete(files("${projectDir}/db"))
            project.delete(files("${projectDir}/logs"))
            project.delete(files("${projectDir}/themes"))
            project.delete(files("${projectDir}/user.xml"))
            //     Creating Target directory ...  ---------------------------------------------------------------------
            mkdir project.ext.target_dir
        }
    }
}

task pushmd(dependsOn: preparingBuild)  {
    group 'sub tasks'
    doLast {
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.md"
            into "${projectDir}\\docs\\changelog\\md"
        }
    }
}

task pullhtml (dependsOn: markdownToHtml){
    group 'sub tasks'
    outputs.upToDateWhen { false }
    doLast {
        copy {
            from "${projectDir}\\docs\\changelog\\html\\changelog.html"
            into "${projectDir}\\src\\main\\resources"
        }
    }
}

task CreateDistribution (dependsOn: installDist) {
    group 'sub tasks'
    outputs.upToDateWhen { false }
    def distribDir = file("${buildDir}/install/XXX")
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.html"
            into distribDir
        }
        if (development_stage == '0') {
            copy {
                from "${projectDir}\\src\\main\\resources\\Logo_dev.png"
                into distribDir
                rename "Logo_dev.png", "Logo.png"
            }
        }
        else if (development_stage == '1') {
            copy {
                from "${projectDir}\\src\\main\\resources\\Logo_beta.png"
                into distribDir
                rename "Logo_beta.png", "Logo.png"
            }
        }
        else {
            copy {
                from "${projectDir}\\src\\main\\resources\\Logo_stable.png"
                into distribDir
                rename "Logo_stable.png", "Logo.png"
            }
        }

        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${distribDir}\\prediction"
        }

        copy {
            from "${projectDir}\\src\\main\\resources\\themes"
            into "${distribDir}\\themes"
        }

        copy {
            from "${projectDir}\\buildResources\\Win\\HO.bat"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\buildResources\\Linux\\ho.sh"
            into "${distribDir}"
            fileMode = 0755
        }

        copy {
            from "${distribDir}/lib"
            include "**/*.jar"
            into "${distribDir}"
        }
        delete "${distribDir}\\hamcrest-core-1.3.jar"
        delete "${distribDir}\\junit-4.12.jar"

        delete "${distribDir}\\bin"
        delete "${distribDir}\\lib"

//        println("renaming distribution")
//        copy {
//            from("${distribDir}")
//            into("${buildDir}/install/${project.version}")
//        }
//        delete "${distribDir}"

        // TODO: check if the folowing 3 blocks are doing anything or if we can remove them .....
        if (development_stage == '0') {
            delete "${buildDir}\\install\\${project.version}\\Logo_beta.ico"
            delete "${buildDir}\\install\\${project.version}\\Logo_stable.ico"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_beta.png"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_stable.png"
        }
        else if (development_stage == '1') {
            delete "${buildDir}\\install\\${project.version}\\Logo_dev.ico"
            delete "${buildDir}\\install\\${project.version}\\Logo_stable.ico"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_dev.png"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_stable.png"
        }
        else {
            delete "${buildDir}\\install\\${project.version}\\Logo_beta.ico"
            delete "${buildDir}\\install\\${project.version}\\Logo_dev.ico"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_beta.png"
            delete "${buildDir}\\install\\${project.version}\\ho_logo_dev.png"
        }
    }
}

task ZipDistribution(dependsOn: 'CreateDistribution', type:Zip) {
    group 'sub tasks'
    archiveFileName  = "HO_${project.version}.zip"
    destinationDirectory  = file("${project.ext.target_dir}")
    from ("${buildDir}/install/${project.version}") {exclude("**\\ho.sh", "**\\HO.bat")}
    from ("${buildDir}/install/${project.version}") {
        include("**\\ho.sh")
        fileMode=0755 }
    doLast {
        println("zipped folder has been created")
    }
}

task updatebuildreferences(dependsOn: ZipDistribution){
    doLast {
        if (releaseArtefacts) {
            println("artefacts have to be uploaded or it will break update process !!!")

            // always update latest.html
            new File("$projectDir/docs/latest.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
            println("latest.html has been updated")

            copy {
                from "${projectDir}\\src\\main\\resources\\release_notes.md"
                into "$projectDir/docs"
                rename { filename -> filename.replace('release_notes', 'release_notes(dev)')}
            }
            println("release notes of DEV version have been updated")

            // update latestbeta.html if beta or stable has been released
            if (development_stage != '0') {
                new File("$projectDir/docs/latestbeta.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
                println("latestbeta.html has been updated")
                copy {
                    from "${projectDir}\\src\\main\\resources\\release_notes.md"
                    into "$projectDir/docs"
                    rename { filename -> filename.replace('release_notes', 'release_notes(beta)')}
                }
                println("release notes of BETA version have been updated")

            }

            // update lateststable.html only if stable has been released
            if (development_stage == '2') {
                new File("$projectDir/docs/lateststable.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
                println("lateststable.html has been updated")
                copy {
                    from "${projectDir}\\src\\main\\resources\\release_notes.md"
                    into "$projectDir/docs"
                    rename { filename -> filename.replace('release_notes', 'release_notes(stable)')}
                }
                println("release notes of STABLE version have been updated")
            }
        }
        else{
            println("html files have not been updated : artefacts should not been released, !!")
        }
    }
}

task createLanguageFileList(dependsOn: poeditorPull)  {
    group 'sub tasks'
    outputs.upToDateWhen { false }

    def lTranslationFiles = []
    fileTree(dir: "${projectDir}\\src\\main\\resources\\sprache", include: '*.properties').visit {
        FileVisitDetails details -> lTranslationFiles << details.file.name
    }

    doLast {
        println("listing available translation ")
        lTranslationFiles = lTranslationFiles.collect { it.take(it.lastIndexOf('.'))}
        File lstFile = new File("${projectDir}\\src\\main\\resources\\sprache\\ListLanguages.txt")
        lstFile.withWriter{ out -> lTranslationFiles.each {out.println it} }
    }

}

task compute_sha_sums(dependsOn: updatebuildreferences){
    group 'sub tasks'
    description 'compute sha sums of binaries and store them in files'
    doLast {
        String command = "cmd /c D:\\Anaconda3\\python ${python_script}"
        Process p = Runtime.getRuntime().exec(command)
    }
}

task resetDB {
    group 'tool'
    description 'copy the database from existing install into project'

    if (! project.hasProperty('resetDir')) {
        ext.resetDir = "D:\\Program Files\\HattrickOrganizerDev\\db"
    }

    doFirst {println("Resetting DB: copying DB from `${resetDir}` into  ${projectDir}")}

    try {
	    doLast {
            copy {
                from resetDir
                into "${projectDir}/db"
            }

            println("Resetting DB: done !")
        }

    } catch (java.lang.Exception e) {
    	println("Resetting DB: CANNOT copy DB from `${resetDir}` into  ${projectDir}"); return false;
    }
}

poeditorPull {
    outputs.upToDateWhen { false }
}

markdownToHtml {
    sourceDir = new File("${projectDir}/docs/changelog/md")
    outputDir = new File("${projectDir}/docs/changelog/html")
    markdownToHtml.hardwraps = true
}


task ReleaseToGitHub(dependsOn: tasks.getByName('githubRelease')){
    group 'ho'
    doLast {
        if (development_stage == '0') {
            println "DEVELOPMENT version has been released on GitHub"
        } else if (development_stage == '1') {
            println major + "." + minor + " BETA version has been released on GitHub.\nBuild ... Release on ...."
        } else if (development_stage == '2') {
            println "automatic release of stable version has not been implemented yet !!"
        }
    }
}

githubRelease {
    def _token = GITHUB_TOKEN  // required token for your personal access with repo permissions
    owner = 'akasolace'
    repo = 'HO'
    releaseAssets = file("$target_dir").listFiles()
    token = _token

    if (releaseArtefacts) {
        if (development_stage == '0') {
            tagName = "dev"
            releaseName = "dev"
            targetCommitish = "master"
            body = "Latest development version aimed at developers. \n It can (will soon or late break your database))"
            prerelease = true
            overwrite = true
        } else if (development_stage == '1') {
            tagName = major + "." + minor
            releaseName = major + "." + minor
            targetCommitish = "master"
            body = "..................."
            prerelease = true
            overwrite = true
        } else if (development_stage == '2') {
            tagName = major + "." + minor
            releaseName = major + "." + minor
            targetCommitish = "master"
            body = "..................."
            prerelease = false
            overwrite = true
        }
    }
}

compileJava.dependsOn preparingBuild
installDist.dependsOn createLanguageFileList
poeditorPull.dependsOn pullhtml
markdownToHtml.dependsOn pushmd

poeditorPull.onlyIf {
    project.hasProperty('POEDITOR_APIKEY') && project.ext.properties.POEDITOR_APIKEY!=''
}

// endregion ======================================================================================================================
